==========Callback ===================================================================
fs.readfile('~~',fuction(err,result){
	console.log(result);
	}
	
--> readfile이 끝나면 function()을 실행시킨다. readfile()의 결과가 err,result 인자로 들어가게된다.

==========Express=====================================================================
http.createServer(req,res)=>{
	res.writeHead(200,{'~~~'});
	res.end('~~~');
}).listen(port,hostname() =>{
	console.log('~~~');
	})

--> var server = http.createServer(function(req,res){});
	server.listen();
	이거랑 같은 의미이다.
	
------------------------------------------------------------------------------------	
var express = require('express');
var app = express();
--> express라는 모듈을 이용해서 application이라는 객체를 생성해줘야한다.
--> express는 사실 함수라서 app = express() 형식으로 만들어줘야한다.

app.get('/',function(req,res){
	res.send('aba'); --> 'aba'를 응답할 것이다.
});
--> get을 라우터라고 부른다. get이 하는일을 라우팅이라한다.
--> 사용자가 web에 접속할 때 GET방식과 POST방식이 있다.
--> 보통 url을 치는건 GET방식이다.
--> GET방식으로 접속한 사용자를 받기위해서 get이라는 함수를 사용한다.
--> 사용자가 홈으로 접속하면 function을 수행한다.
--> get이라는 함수가 사용자가 root로 들어왔을 때 function을 실행시키면서 
    첫번째 매개변수로 사용자가 요청한 req를, 요청한 정보에대한 응답 객체를 가지고 있는
	res를 전해준다.
app.listen(port,function(){});
--> 만든 web application이 port를 바라보게된다.

----------------------------------------------------------------------------------------
app.use(express.static('public'));	-->정적인 파일이 위치할 디렉토리를 정하는 기능 // public안에 정적인 파일 route.png 을 저장하면 

app.get('/route'/, fuction(req,res){
	res.send('Hello Router, <img src="/route.png">')		//  /route로 접속했을 때 route.png를 보여줘라 라는 것이 가능
	})
	
	
-------------------------------------------------------------------------------------------